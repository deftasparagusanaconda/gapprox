approx_linear_1(inarr)
approx_linear_2(inarr)
approx_linear_3(inarr)
approx_parabola_1(inarr)
approx_parabola_2(inarr)
approx_polynomial(inarr, int degree)
approx_fourier(inarr, int terms)
approx_DCT_1(inarr)
approx_DCT_2(inarr)
approx_DCT_3(inarr)
approx_DCT_4(inarr)

// each function takes int[] and outputs int[] but also outputs a f(x) that is compatible with the current front-end. for example:
/*
// pseudo-code
int in[5] = {1,2,4,3,5};
int out[5];
char g_of_x = :

out[5] = approx_linear_1(in);



interpolation for all function 
J+
-----------------------------------------------------------------------------------
linear approximation:
	J+ linear approximation (tangent)
	J+ mean absolute deviation
	J+ least squares (RMS)
	J- least cubes
	J- iterative algorithms: (to minimize y_error, x_error, perpendicular_error, directional_error, or area_error)
		- Newton's
		- tangent 
		- secant

arc approximation:
	C- simple arc extrapolation
	C- error minimization arc (y, x, perp, dir, area error minimization)

parabola approximation:
	C- simple point extrapolation
	C- error minimization (with discrete integrals)

cubic (and higher degrees) approximation:
	C- error minimization (with matrix coeffs and discrete integrals)

frequency transformation approximation:
	C+ DFT (FFT)
	C- DCT (I, II, III, IV)
	C- DST (I, II, III, IV)

taylor approximation:
	J+ taylor series (with discrete)

mclaurin approximation:
	J+ mclaurin series (with discrete)

bezier approximation:
	?- bezier curves


(also implement x, y, perpendicular, any direction, and area minimization separately)





